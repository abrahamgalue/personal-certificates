---
import type { Certificate } from '@/types/certificates'
import certificatesData from '@/data/certificates.json'
import FilterBar from '@/components/FilterBar.astro'
import CertificateCard from '@/components/CertificateCard.astro'
import NotFound from '@/components/NotFound.astro'

const certificates = certificatesData.certificates as Certificate[]
const sortedCertificates = certificates.sort((a, b) =>
  a.name.localeCompare(b.name)
)

const allInstitutions: string[] = [
  ...new Set(sortedCertificates.map((cert) => cert.institution)),
].sort()
---

<header>
  <div class="header-content">
    <h1 class="main-title">Certificados de Abraham Galue</h1>
    <p class="subtitle">
      Mi colección personal de certificados y logros profesionales
    </p>
  </div>
</header>

<main>
  <FilterBar allInstitutions={allInstitutions} />

  <section class="certificates-grid" id="certificatesGrid">
    {
      sortedCertificates.map((certificate) => (
        <CertificateCard
          name={certificate.name}
          institution={certificate.institution}
          date={certificate.date}
          type={certificate.type}
          tags={certificate.tags}
          pdfPath={`certificates/${certificate.filename}.pdf`}
          imagePath={`/src/assets/${certificate.filename}.webp`}
          description={certificate.description}
        />
      ))
    }
  </section>

  <div id="noResults" class="no-results" style="display: none;">
    <NotFound />
    <h3>No se encontraron certificados</h3>
    <p>Intenta ajustar tus filtros o términos de búsqueda</p>
  </div>
</main>

<script>
  const state: { institution: string; search: string } = {
    institution: 'all',
    search: '',
  }

  function normalize(str: string) {
    return str.toLowerCase()
  }

  const searchInput = document.getElementById('searchInput') as HTMLInputElement
  const clearSearchBtn = document.getElementById(
    'clearSearch'
  ) as HTMLButtonElement
  const clearAllFiltersBtn = document.getElementById(
    'clearAllFilters'
  ) as HTMLButtonElement
  const resultsCount = document.getElementById('resultsCount') as HTMLElement
  const certificatesGrid = document.getElementById(
    'certificatesGrid'
  ) as HTMLElement
  const noResults = document.getElementById('noResults') as HTMLElement
  const filterBtns = document.querySelectorAll<HTMLButtonElement>('.filter-btn')
  const certificateCards =
    document.querySelectorAll<HTMLElement>('.certificate-card')

  function filterCertificates() {
    const search = normalize(state.search)

    const visibleCards = Array.from(certificateCards).filter((card) => {
      const name = normalize(card.dataset.name ?? '')
      const institution = normalize(card.dataset.institution ?? '')
      const tags = normalize(card.dataset.tags ?? '')
      const type = normalize(card.dataset.type ?? '')

      const matchesSearch =
        !search ||
        name.includes(search) ||
        institution.includes(search) ||
        tags.includes(search) ||
        type.includes(search)

      const matchesInstitution =
        state.institution === 'all' || institution === state.institution

      return matchesSearch && matchesInstitution
    })

    certificateCards.forEach((card) => {
      if (visibleCards.includes(card)) {
        card.style.display = 'flex'
        card.classList.add('fade-in')
      } else {
        card.style.display = 'none'
        card.classList.remove('fade-in')
      }
    })

    resultsCount.textContent = `${visibleCards.length} certificado${
      visibleCards.length !== 1 ? 's' : ''
    } encontrado${visibleCards.length !== 1 ? 's' : ''}`

    certificatesGrid.style.display = visibleCards.length ? 'grid' : 'none'
    noResults.style.display = visibleCards.length ? 'none' : 'block'
  }

  function setSearch(value: string): void {
    state.search = value
    searchInput.value = value
    clearSearchBtn.style.display = value ? 'flex' : 'none'
    filterCertificates()
  }

  function setInstitution(value: string): void {
    state.institution = value
    filterCertificates()
  }

  searchInput.addEventListener('input', (e: Event) =>
    setSearch((e.target as HTMLInputElement).value)
  )

  clearSearchBtn.addEventListener('click', () => setSearch(''))

  filterBtns.forEach((btn) =>
    btn.addEventListener('click', () => {
      filterBtns.forEach((b) => b.classList.remove('active'))
      btn.classList.add('active')
      setInstitution(btn.dataset.filter ?? 'all')
    })
  )

  clearAllFiltersBtn.addEventListener('click', () => {
    setSearch('')
    setInstitution('all')
    filterBtns.forEach((btn) => {
      btn.classList.toggle('active', btn.dataset.filter === 'all')
    })
  })

  filterCertificates()
</script>

<style>
  header {
    margin: 4rem auto 5rem;
    max-width: 1200px;
    text-align: center;
  }

  main {
    margin: 0 auto;
    max-width: 1200px;
    padding: 0 1rem 2rem;
  }

  .header-content {
    margin: 0 auto;
    max-width: 600px;
  }

  .main-title {
    background-clip: text;
    background: linear-gradient(135deg, #3b82f6, #1d4ed8, #2563eb);
    font-size: 3rem;
    font-weight: 800;
    line-height: 1.2;
    text-wrap: balance;
    margin-bottom: 1rem;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }

  .subtitle {
    color: #94a3b8;
    font-size: 1.25rem;
    font-weight: 400;
    line-height: 1.6;
    margin: 0 auto;
    max-width: 500px;
    text-wrap: balance;
  }

  .certificates-grid {
    display: grid;
    gap: 2rem;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    margin-bottom: 2rem;
  }

  .no-results {
    color: #64748b;
    padding: 4rem 2rem;
    text-align: center;
  }

  .no-results svg {
    color: #475569;
    margin-bottom: 1rem;
  }

  .no-results h3 {
    color: #94a3b8;
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
  }

  .no-results p {
    color: #64748b;
    font-size: 1rem;
  }

  @media (width <= 768px) {
    header {
      margin: 2rem auto 3rem;
    }

    main {
      padding: 0 1rem 1rem;
    }

    .main-title {
      font-size: 2rem;
    }

    .subtitle {
      font-size: 1rem;
    }

    .certificates-grid {
      gap: 1.5rem;
      grid-template-columns: repeat(1, minmax(0, 1fr));
    }
  }

  @media (width <= 480px) {
    .main-title {
      font-size: 1.75rem;
    }

    .certificates-grid {
      gap: 1rem;
      grid-template-columns: repeat(1, minmax(0, 1fr));
    }
  }
</style>
